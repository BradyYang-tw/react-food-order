{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u5C08\\u6848\\\\Udemy\\\\react-food-order\\\\src\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n// const cartReducer = (state, action) => {\n//   if (action.type === \"ADD\") {\n//     const updatedItems = state.items.concat(action.item);\n//     const updatedTotalAmount =\n//       state.item.totalAmount + action.item.price * action.item.amount;\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   return defaultCartState;\n// };\n// const cartReducer = (state, action) => {\n//   if (action.type === \"ADD\") {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     const existingCartItem = state.items[existingCartItemIndex];\n//     let updatedItems;\n\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === \"REMOVE\") {\n//     const existingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.items[existingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1) {\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\n//     } else {\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n//       updatedItems = [...state.items];\n//       updatedItems[existingCartItemIndex] = updatedItem;\n//     }\n\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n\n//   return defaultCartState;\n// };\n\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCarAction] = useReducer(cartReducer, defaultCartState);\n  const addItemFromCartHandler = item => {\n    dispatchCarAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemFromCartHandler = id => {\n    dispatchCarAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemFromCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"8veiWIPYIsIOqKdTPvnxyN0WtAY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","CartProvider","props","cartState","dispatchCarAction","cartReducer","addItemFromCartHandler","item","type","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"sources":["D:/專案/Udemy/react-food-order/src/store/CartProvider.js"],"sourcesContent":["import React, { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n// const cartReducer = (state, action) => {\r\n//   if (action.type === \"ADD\") {\r\n//     const updatedItems = state.items.concat(action.item);\r\n//     const updatedTotalAmount =\r\n//       state.item.totalAmount + action.item.price * action.item.amount;\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n//   return defaultCartState;\r\n// };\r\n// const cartReducer = (state, action) => {\r\n//   if (action.type === \"ADD\") {\r\n//     const updatedTotalAmount =\r\n//       state.totalAmount + action.item.price * action.item.amount;\r\n\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id\r\n//     );\r\n//     const existingCartItem = state.items[existingCartItemIndex];\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n//   if (action.type === \"REMOVE\") {\r\n//     const existingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.id\r\n//     );\r\n//     const existingItem = state.items[existingCartItemIndex];\r\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n//     let updatedItems;\r\n//     if (existingItem.amount === 1) {\r\n//       updatedItems = state.items.filter((item) => item.id !== action.id);\r\n//     } else {\r\n//       const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[existingCartItemIndex] = updatedItem;\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n\r\n//   return defaultCartState;\r\n// };\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCarAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemFromCartHandler = (item) => {\r\n    dispatchCarAction({ type: \"ADD\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCarAction({ type: \"REMOVE\", id: id });\r\n  };\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemFromCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,gBAAgB;AAAC;AAEzC,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,iBAAiB,CAAC,GAAGR,UAAU,CAC/CS,WAAW,EACXP,gBAAgB,CACjB;EACD,MAAMQ,sBAAsB,GAAIC,IAAI,IAAK;IACvCH,iBAAiB,CAAC;MAAEI,IAAI,EAAE,KAAK;MAAED,IAAI,EAAEA;IAAK,CAAC,CAAC;EAChD,CAAC;EACD,MAAME,yBAAyB,GAAIC,EAAE,IAAK;IACxCN,iBAAiB,CAAC;MAAEI,IAAI,EAAE,QAAQ;MAAEE,EAAE,EAAEA;IAAG,CAAC,CAAC;EAC/C,CAAC;EACD,MAAMC,WAAW,GAAG;IAClBZ,KAAK,EAAEI,SAAS,CAACJ,KAAK;IACtBC,WAAW,EAAEG,SAAS,CAACH,WAAW;IAClCY,OAAO,EAAEN,sBAAsB;IAC/BO,UAAU,EAAEJ;EACd,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEE,WAAY;IAAA,UACtCT,KAAK,CAACY;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAtBIb,YAAY;AAAA,KAAZA,YAAY;AAwBlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}